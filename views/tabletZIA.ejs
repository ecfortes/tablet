<!DOCTYPE html>
<html lang="pt">

<head>
  <!-- Define a codificação e a escala da página para dispositivos móveis -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Link para o arquivo CSS externo, que contém os estilos da página -->
  <link rel="stylesheet" href="style.css" />
  <link rel="icon" href="/favicon.ico" type="image/x-icon">
  <title>ZIA</title>
</head>

<body style="background-image: url('background.webp');">
  <!-- Cabeçalho da página com a logo e um menu -->
  <header class="header">
    <div style="display: flex; align-items:center;">
      <!-- Logo da página exibida com altura ajustada -->
      <img style="height: 36px;" src="logo.webp" alt="">
    </div>
    <nav>
      <ul class="menu"></ul> <!-- Menu vazio; conteúdo será adicionado pelo CSS ou JavaScript -->
    </nav>
  </header>

  <!-- Título da seção principal exibido no topo da página -->
  <section style="padding-top: 100px; color:white; font-size: larger;">Anotação de Paradas</section>

  <!-- Seção para exibir o status e detalhes dos apontamentos de parada da máquina -->
  <section>
    <!-- Exibe o status atual da máquina em um bloco com borda arredondada -->
    <div style="border: solid 1px; margin-bottom: 10px; background-color: lightgray; border-radius: 10px; width:700px">
      <p class="machine-name"><b></b></p> <!-- Nome da máquina será preenchido dinamicamente -->
      <div style="display:flex; flex-direction: column; align-items: flex-start;" class="div-status">
        <div style="display: flex; flex-direction: row">
          <p>Status Atual:</p>
          <p id="statusText"></p> <!-- Texto do status será atualizado pelo JavaScript -->
        </div>

        <div id="paradaAtual" style="margin-top: 16px;padding: 5px;display:none;flex-direction: column;align-items: flex-start;border: solid 1px;border-radius: 10px; width:667px">
          <p>Motivo: </p>
          <p>Hora Inicio: </p>
          <p>Tempo Transcorr.: </p>
        </div>
      </div>
    </div>

    <!-- Condicional para verificar se há apontamentos a serem exibidos -->
    <% if (filteredApontamentos.length > 0) { %>
    <% filteredApontamentos.forEach(apontamento => { %>
    <div style="margin-top:10px" class="div-regstop" data-id="<%= apontamento.id %>">
      <!-- Exibe o ID do apontamento (oculto para o usuário) -->
      <div style="display:none">
        <p>ID Apontamento</p>
        <div><%= apontamento.id %></div>
      </div>
      <!-- Exibe o tempo total que a máquina ficou parada neste apontamento -->
      <div>
        <p>Tempo de Maquina Parada:</p>
        <div><%= apontamento.machine_event.payload.tParada %> min</div>
      </div>
      <!-- Hora em que a máquina começou a parada -->
      <div>
        <p>Hora de Inicio:</p>
        <div><%= new Date(apontamento.machine_event.payload.InicioParada).toLocaleString() %></div>
      </div>
      <!-- Hora em que a parada terminou -->
      <div>
        <p>Hora de Fim:</p>
        <div><%= new Date(apontamento.machine_event.payload.FimParada).toLocaleString() %></div>
      </div>
      <!-- Dropdown para o usuário selecionar o motivo da parada -->
      <select class="select-dd">
        <option value="0">Informe o motivo de parada:</option>
      </select>
      <!-- Botão para enviar a justificativa da parada -->
      <button class="bt-informa">Justificar</button>
    </div>
    <% }) %>
    <% } else { %>
    <!-- Caso não existam apontamentos, exibe uma mensagem padrão -->
    <p>Nenhum apontamento pendente.</p>
    <% } %>
  </section>

  <!-- Script JavaScript para interatividade da página -->
  <script>
    // Converte os dados do backend para um objeto JavaScript
    const data = <%-JSON.stringify(data) %>;

    document.addEventListener("DOMContentLoaded", function() {
      console.log(data); // Log dos dados para debug


      ////// Função para atualizar o status da máquina //////

      // Extrai o ID da máquina diretamente da URL acessada
      function getMachineIdFromURL() {
        const path = window.location.pathname; // Exemplo: "/maquinas/1"
        const segments = path.split('/');
        //console.log(path, " ", segments)
        return segments[1]; // Obtém o ID da máquina baseado na estrutura da URL
      }

      // Armazena o ID da máquina em uma variável para uso posterior
      const machineId = getMachineIdFromURL();
      console.log(machineId);

      // Função para buscar o status atual da máquina e atualizar na página
      async function fetchAndUpdateStatus() {
        const statusText = document.getElementById("statusText");
        const paradaAtual = document.getElementById("paradaAtual");
        try {
          // Faz a requisição para obter os dados de status da máquina
          const response = await fetch(`http://192.168.1.16:1880/maquinas/${machineId}`);
          if (!response.ok) throw new Error("Erro ao buscar dados");

          const data = await response.json(); // Converte a resposta para JSON
          console.log("Dados recebidos:", data); // Verifica o JSON completo retornado

          // Verifique se a máquina existe no retorno
          if (!data.status || !data.status[machineId]) {
            console.error(`Status da máquina ID ${machineId} não encontrado.`);
            statusText.textContent = "Dados indisponíveis";
            return;
          }

          // Obtenha mode/state
          let mode = data.status[machineId][0];
          let state = data.status[machineId][1];
          let strStatus;

          console.log("Mode:", mode);
          console.log("State:", state);

          if (mode == 2) {
            const statusMap = {
              1: 'Parada', //'Clearing',
              2: 'Parada', //'Stopped',
              3: 'Parada', // 'Starting',
              4: 'Parada', // 'Idle',
              5: 'Parada Externa', //'Suspend',
              6: 'Produzindo', //'Execute',
              7: 'Produzindo',//'Stopping',
              8: 'Falha',//'Aborting',
              9: 'Falha',//'Aborted',
              10: 'Parada',//'Holding',
              11: 'Parada Interna',//'Held',
              12: 'Parada',//'Unholding',
              13: 'Parada',//'Suspending',
              14: 'Parada',//'Unsuspending',
              15: 'Parada',//'Reseting',
              16: 'Parada',//'Completing',
              17: 'Parada'//'Complete'
            };

            // Defina o status com fallback para "Stopped" se o estado não existir no mapa
            strStatus = statusMap[state] || 'Stopped';
            console.log("Status final:", strStatus);
          }

          // Atualize o status da máquina na página
          statusText.textContent = strStatus || "Status não disponível";

          // Verifica se há uma parada ativa
          if (data.parada_atual && data.parada_atual[machineId] && data.parada_atual[machineId].active) {
            const motivoParada = data.parada_atual[machineId].statechanged_reason;
            const tempoParada = data.parada_atual[machineId].tParadaAtual;
            const tempoParadaFormatado = tempoParada ? tempoParada.toFixed(2) : "0";
            const DataInicioParada = data.parada_atual[machineId].hora
            const horaFormatada = new Date(DataInicioParada).toLocaleString();
            console.log("Motivo da Parada:", motivoParada);
            console.log("Hora inicio de Parada:", horaFormatada);
            console.log("Tempo de Parada:", tempoParadaFormatado);

            // Atualize os elementos com os dados de parada
            paradaAtual.innerHTML = `
                    <p>Motivo: ${motivoParada}</p>
                    <p>Hora Início: ${horaFormatada}</p>
                    <p>Tempo Transcorr.: ${tempoParadaFormatado} min</p>`;

           paradaAtual.style.display = "flex"; // Oculta a div quando não há dados de parada
          } else {
            paradaAtual.style.display = "none"; // Oculta a div quando não há dados de parada
          }
        } catch (error) {
          console.error("Erro:", error);
          statusText.textContent = "Erro ao carregar dados"; // Mensagem de erro ao carregar os dados
        }
      }

      // Chamada inicial da função e configuração para atualização a cada 15 segundos
      fetchAndUpdateStatus();
      setInterval(fetchAndUpdateStatus, 1000);


      ////// Populando dropdown de motivos de parada //////
      const dropdowns = document.querySelectorAll(".select-dd");
      dropdowns.forEach(dropdown => {
        dropdown.innerHTML = '<option value="0">Informe o motivo de parada:</option>';

        // Adiciona os motivos de parada no dropdown se disponíveis
        if (data.stopreasons && data.stopreasons.stopReasons) {
          data.stopreasons.stopReasons.forEach(reason => {
            const option = document.createElement("option");
            option.value = reason;
            option.textContent = reason[0];
            dropdown.appendChild(option);
          });
        } else {
          console.error("Não foram encontrados motivos de parada para a máquina especificada.");
        }
      });

      ////// Atualiza o nome da máquina exibido na interface //////
      const machine_name = document.querySelector(".machine-name");
      if (data.stopreasons) {
        machine_name.innerHTML = data.stopreasons.name;
      } else {
        console.error("Erro de configuração de máquina - Esta máquina não existe");
      }

      ////// Configuração do botão para enviar justificativa //////
      document.querySelectorAll(".bt-informa").forEach(button => {
        button.addEventListener("click", function() {
          const divRegstop = button.closest(".div-regstop"); // Encontra o contêiner mais próximo do botão
          const apontamentoId = divRegstop.getAttribute("data-id"); // Obtém o ID do apontamento
          const motivoSelect = divRegstop.querySelector(".select-dd"); // Dropdown selecionado
          const motivoParada = motivoSelect.value; // Valor selecionado

          // Verifica se o usuário escolheu um motivo válido
          if (motivoParada === "0") {
            alert("Por favor, selecione um motivo de parada.");
            return;
          }

          // Adiciona uma classe para iniciar a animação de saída do elemento
          divRegstop.classList.add("fade-out");

          // Envia a justificativa de parada usando POST para o backend
          fetch(`http://192.168.1.16:1880/maquinas/${apontamentoId}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                id: apontamentoId,
                motivo: motivoParada
              })
            })
            .then(response => {
              if (response.ok) {
                alert("Justificativa enviada com sucesso!"); // Mensagem de sucesso
              } else {
                alert("Erro ao enviar justificativa."); // Erro ao enviar
                divRegstop.classList.remove("fade-out"); // Reverte a animação em caso de erro
              }
            })
            .catch(error => {
              console.error("Erro:", error);
              divRegstop.classList.remove("fade-out"); // Reverte a animação em caso de erro
            });
        });
      });
    });
  </script>
</body>

</html>